import json
import os
import requests
from google import genai
from google.genai import types


gemini_key = os.getenv("GEMINI_API_KEY")

class Geminibot:
    """A class to interact with the Gemini API for generating tags from images or text.
    """
    def __init__(self):
        self.api = gemini_key

    def get_tags(self, content, content_type="image"):
        """Generate tags for the given content using the Gemini API.
        Args:
            content (str): The content to generate tags for. This can be a URL to an image or a text string.
            content_type (str): The type of content. Can be "image" or "text". Defaults to "image".
        Returns:
            list: A list of tags generated by the Gemini API.
        Raises:
            ValueError: If the content_type is not "image" or "text", or if no valid tags are returned.
        """
        client = genai.Client()
        if content_type == "image":
            # Convert URL to image bytes
            image_bytes = requests.get(content).content
            content_part = types.Part.from_bytes(data=image_bytes, mime_type="image/jpeg")
            prompt = "Return only a JSON array of tags for this image. Do not include explanations."
            contents = [prompt, content_part]
        else:  # text type
            prompt = f"Return only a JSON array of tags for this text: {content}"
            contents = [prompt]

        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=contents
        )

        try:
            if response.text is not None:
                tags = json.loads(response.text)
                print(f"text is not none, tags {tags}")
            else:
                tags = []
                print(f"text is none")
        except json.JSONDecodeError:
            start = response.text.find("[")
            end = response.text.rfind("]") + 1
            try:
                tags = json.loads(response.text[start:end])
            except:
                tags = []

        if not tags:
            raise ValueError("Gemini did not return any valid tags.")
        return tags
